{"version":3,"sources":["meta-settings.js"],"names":["Swiper","is_touch_enabled","window","navigator","maxTouchPoints","msMaxTouchPoints","swiperBlock","document","getElementsByClassName","windowWidth","swiperElementArr","breakpointsArr","selector","replace","min","Array","from","querySelectorAll","swiperBreakpoints","swiperParams","breakpoints","closestBreakpoint","swiperSearchMinMax","arr","max","indexOf","length","CalcBreakpointLoop","currentBreakpoint","breakpointsArrReverse","num","swiperElementWidth","slidesPerView","obj","undefined","loop","hasOwnProperty","Math","floor","innerWidth","loopedSlides","push","slice","reverse","getBoundingClientRect","width","variable","navigation","classList","prevEl","minMax","SafariSwiper","updateSlidesClasses","addEventListener","SwiperObjs","e","margin","isArray","SwiperArr","nextEl","remove","swiperHTMLPosLeft","swiperHTML","destroy","elWidth","swiper","swiperWrapper","draggable","revert","difference","sayswho","slideTo","setTimeout","forEach","activeIndex","params","swiperAmount","speed","slides","$el","left","$wrapperEl","updateProgress","posLeft","slidesGrid","offsetWidth","options","defaultOptions","hrefClass","activeSlideLengthToggle","ui","Object","assign","FLAG_FOR_ENTER","offset","startProgress","setTranslate","event","getAttribute","console","log","ceil","startTimeFlip","Date","getTime","changeActiveSlide","startTranslateValue","translateValue","swiperSlide","swiperSlideWidth","FlagOnSwitchActiveSlide","startTranslateForActiveSwitch","ariaLabelNumber","ariaLabelFormat","ariaLabelNumberOLD","changeActiveClass","arguments","startTranslate","translate","SwiperAutoplaySmooth","timeInSecond","timeStamp","lastTime","mergeOptions","translateTo","elem","location","requestAnimationFrame","enableScrollSpy","idNumber","id","parseInt","key","optionsFromDataAttr","element","CountUp","xPosition","swiperSlideSize","offsetParent","yPosition","className","needle","reduce","contains","add","top","rect","progress","getPosition","offsetLeft","scrollLeft","clientLeft","offsetTop","scrollTop","clientTop","x","y","hasSomeParentTheClass","classname","split","parentNode","closest","a","b","abs","isInViewport","el","bottom","innerHeight","documentElement","clientHeight","right","clientWidth","tem","ua","userAgent","M","match","test","exec","join","appName","appVersion","counts","separator","scrollSpyRunOnce","count","concat","value","innerHTML","$","data"],"mappings":"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","file":"meta-settings.js","sourcesContent":["// import { CountUp } from \"./plugins/countUp.js\";\nimport Swiper from \"https://unpkg.com/swiper@8/swiper-bundle.esm.browser.min.js\";\n\n/**\n * function to know what browser client is using [Application and version of it]\n * Used in fixForSwiperSafariOld function to toggle it only in Safari 11 and 12\n * where touch-action: pan-y || pan-x not supported\n * **/\nnavigator.sayswho = (function () {\n  var ua = navigator.userAgent;\n  var tem;\n  var M =\n    ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) ||\n    [];\n  if (/trident/i.test(M[1])) {\n    tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n    return \"IE \" + (tem[1] || \"\");\n  }\n  if (M[1] === \"Chrome\") {\n    tem = ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\n    if (tem != null) return tem.slice(1).join(\" \").replace(\"OPR\", \"Opera\");\n  }\n  M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, \"-?\"];\n  if ((tem = ua.match(/version\\/(\\d+)/i)) != null) M.splice(1, 1, tem[1]);\n  return M.join(\" \");\n})();\n\n/**\n * Function check for touchscreen device\n * **/\nexport function is_touch_enabled() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n\n/**\n * Swiper функція яка прорахує чи потрібно включати loop на усіх breakpoint-ах, які ви задасте\n * Swiper function that will calc if it needed to turn on loop mode on all breakpoints that you had written\n **/\nexport function MetaSwiper(selector, swiperParams) {\n  let variable = null;\n\n  const swiperBlock = document.getElementsByClassName(\n    selector.replace(/^\\./, \"\")\n  )[0];\n  const swiperElementArr = Array.from(\n    swiperBlock.querySelectorAll(\".swiper-slide\")\n  );\n  const swiperBreakpoints = swiperParams.breakpoints;\n  const breakpointsArr = [];\n\n  function swiperSearchMinMax(arr, windowWidth) {\n    let min = 0;\n    let max = 9999;\n    let closestBreakpoint = closest(arr, windowWidth);\n\n    if (windowWidth - closestBreakpoint >= 0) {\n      if (closestBreakpoint === arr[arr.length - 1]) {\n        min = arr[arr.length - 1];\n      } else {\n        min = closestBreakpoint;\n        max = arr[arr.indexOf(closestBreakpoint) + 1];\n      }\n    } else {\n      if (closestBreakpoint === arr[0]) {\n        max = closestBreakpoint;\n      } else {\n        min = arr[arr.indexOf(closestBreakpoint) - 1];\n        max = closestBreakpoint;\n      }\n    }\n\n    return [min, max];\n  }\n\n  function CalcBreakpointLoop() {\n    let currentBreakpoint = breakpointsArrReverse.find(\n      (num) => num <= window.innerWidth\n    );\n\n    for (let windowWidth in swiperBreakpoints) {\n      let obj = swiperBreakpoints[windowWidth];\n\n      if (\n        obj.slidesPerView === \"auto\" &&\n        +windowWidth === currentBreakpoint &&\n        swiperParams.loop === undefined\n      ) {\n        const swiperElementWidth =\n          swiperElementArr[0].getBoundingClientRect().width;\n        obj.loop =\n          swiperElementArr.length >=\n          Math.max(Math.floor(window.innerWidth / swiperElementWidth) + 1, 2);\n        obj.loopedSlides = Math.floor(window.innerWidth / swiperElementWidth);\n      } else if (\n        obj.slidesPerView !== \"auto\" &&\n        swiperParams.loop === undefined\n      ) {\n        obj.loop = swiperElementArr.length > obj.slidesPerView;\n        obj.loopedSlides = obj.slidesPerView + 1;\n      }\n    }\n  }\n\n  for (let windowWidth in swiperBreakpoints) {\n    // skip loop if the property is from prototype\n    if (!swiperBreakpoints.hasOwnProperty(windowWidth)) continue;\n\n    let obj = swiperBreakpoints[windowWidth];\n\n    breakpointsArr.push(+windowWidth);\n  }\n\n  const breakpointsArrReverse = breakpointsArr.slice().reverse();\n\n  if (\n    swiperParams.slidesPerView === \"auto\" &&\n    swiperParams.loop === undefined\n  ) {\n    const swiperElementWidth =\n      swiperElementArr[0].getBoundingClientRect().width;\n    swiperParams.loop =\n      swiperElementArr.length >=\n      Math.max(Math.floor(window.innerWidth / swiperElementWidth) + 1, 2);\n    swiperParams.loopedSlides = Math.floor(\n      window.innerWidth / swiperElementWidth\n    );\n  } else if (swiperParams.slidesPerView && swiperParams.loop === undefined) {\n    swiperParams.loop = swiperElementArr.length > swiperParams.slidesPerView;\n    swiperParams.loopedSlides = swiperParams.slidesPerView + 1;\n  }\n\n  CalcBreakpointLoop();\n\n  let windowWidth = window.innerWidth;\n\n  variable = new Swiper(selector, swiperParams);\n  SafariSwiper(variable);\n\n  let minMax = null;\n\n  if (breakpointsArr.length > 0) {\n    minMax = swiperSearchMinMax(breakpointsArr, windowWidth);\n  }\n\n  window.addEventListener(\"resize\", function (e) {\n    if (windowWidth === window.innerWidth) return;\n    windowWidth = window.innerWidth;\n\n    if (minMax && windowWidth >= minMax[0] && windowWidth <= minMax[1]) return;\n\n    if (minMax) {\n      minMax = swiperSearchMinMax(breakpointsArr, windowWidth);\n    }\n\n    variable.navigation.nextEl.classList.remove(\n      \"swiper-button-lock\",\n      \"swiper-button-disable\"\n    );\n    variable.navigation.prevEl.classList.remove(\n      \"swiper-button-lock\",\n      \"swiper-button-disable\"\n    );\n\n    variable.destroy();\n\n    if (swiperParams.slidesPerView === \"auto\") {\n      const swiperElementWidth =\n        swiperElementArr[0].getBoundingClientRect().width;\n      swiperParams.loop =\n        swiperElementArr.length >=\n        Math.max(Math.floor(window.innerWidth / swiperElementWidth) + 1, 2);\n      swiperParams.loopedSlides = Math.floor(\n        window.innerWidth / swiperElementWidth\n      );\n    }\n\n    CalcBreakpointLoop();\n\n    variable = new Swiper(selector, swiperParams);\n    variable.updateSlidesClasses();\n    SafariSwiper(variable);\n  });\n}\n\n/**\n * Function for Swiper correct working with 'swipe' in old Safari 11 and 12,\n * where touch-action: pan-y || pan-x not supported\n * **/\nexport function SafariSwiper(SwiperObjs) {\n  if (\n    (navigator.sayswho === `Safari 11` || navigator.sayswho === `Safari 12`) &&\n    !is_touch_enabled()\n  ) {\n    let SwiperArr = null;\n\n    if (Array.isArray(SwiperObjs)) {\n      SwiperArr = SwiperObjs;\n    } else {\n      SwiperArr = [SwiperObjs];\n    }\n\n    SwiperArr.forEach((swiper) => {\n      const swiperParams = swiper.params;\n      const swiperAmount = swiperParams.loop\n        ? swiper.slides.length / 3\n        : swiper.slides.length;\n      const swiperHTML = swiper.$el[0];\n      const swiperHTMLPosLeft = swiperHTML.getBoundingClientRect().left;\n      const swiperWrapper = swiper.$wrapperEl[0];\n      let activeIndex = swiper.activeIndex;\n      let realIndex = swiper.realIndex;\n\n      let elWidth, margin;\n\n      if (swiper.slides.length > 1) {\n        elWidth = swiper.slidesGrid[1];\n        margin = elWidth - swiper.slides[1].offsetWidth;\n      }\n\n      let posLeft = null;\n\n      $(swiperWrapper).draggable({\n        axis: \"x\",\n        revert: true,\n        revertDuration: 0,\n\n        start: function (event, ui) {\n          activeIndex = swiper.activeIndex;\n          realIndex = swiper.realIndex;\n          posLeft = ui.offset.left;\n        },\n\n        drag: function (event, ui) {\n          if (swiperParams.effect !== \"creative\") {\n            swiper.setTranslate(ui.offset.left - swiperHTMLPosLeft, 0, 0);\n          }\n        },\n\n        stop: function (event, ui) {\n          const difference = posLeft - ui.offset.left;\n          console.log(difference);\n\n          if (difference > 0) {\n            swiper.slideTo(\n              activeIndex + Math.ceil(difference / elWidth),\n              swiperParams.speed\n            );\n          } else {\n            swiper.slideTo(\n              activeIndex + Math.floor(difference / elWidth),\n              swiperParams.speed\n            );\n          }\n\n          if (swiperParams.loop) {\n            if (swiper.activeIndex < swiperAmount / 2) {\n              setTimeout(function () {\n                swiper.slideTo(swiper.activeIndex + swiperAmount, 0);\n              }, swiperParams.speed);\n            }\n\n            if (swiper.activeIndex / 2 >= swiperAmount) {\n              setTimeout(function () {\n                swiper.slideTo(swiper.activeIndex - swiperAmount, 0);\n              }, swiperParams.speed);\n            }\n          }\n\n          swiper.slideReset(0);\n          swiper.updateProgress();\n          swiper.updateSlidesClasses();\n        },\n      });\n    });\n  }\n}\n\n/**\n * Function for Swiper running animation (like Marquee JS)\n * **/\nexport function runningSwiperFunction(swiper, options = {}) {\n  let defaultOptions = {\n    speed: 1,\n    hrefClass: \"\",\n    changeActiveClass: false,\n    activeSlideLengthToggle: 1,\n  };\n\n  let mergeOptions = Object.assign(defaultOptions, options);\n\n  let FLAG_FOR_ENTER = false;\n\n  let startProgress = swiper.progress;\n  let startTranslate = swiper.translate;\n  const swiperParams = swiper.params;\n  const swiperWrapper = swiper.wrapperEl;\n\n  if (\n    mergeOptions.hrefClass !== \"\" &&\n    typeof mergeOptions.hrefClass === \"string\"\n  ) {\n    swiperWrapper.querySelectorAll(mergeOptions.hrefClass).forEach((elem) => {\n      elem.addEventListener(\"click\", function () {\n        window.location = elem.getAttribute(\"data-src\");\n      });\n    });\n  }\n\n  swiperWrapper.addEventListener(\"mouseenter\", () => {\n    FLAG_FOR_ENTER = true;\n  });\n\n  swiperWrapper.addEventListener(\"mouseleave\", () => {\n    FLAG_FOR_ENTER = false;\n  });\n\n  let startTimeFlip = new Date().getTime();\n  let lastTime = 0;\n  let FlagOnSwitchActiveSlide = false;\n\n  let activeIndex = Math.floor(\n    swiperParams.loop ? swiper.slides.length / 3 : swiper.slides.length\n  );\n  const swiperAmount = activeIndex;\n\n  function changeActiveSlide(startTranslateValue, translateValue) {\n    console.log(123);\n    let swiperSlide = swiper.slides[activeIndex];\n\n    let swiperSlideWidth = swiperSlide.swiperSlideSize;\n\n    if (\n      startTranslateValue - translateValue >=\n        swiperSlideWidth * mergeOptions.activeSlideLengthToggle &&\n      !FlagOnSwitchActiveSlide\n    ) {\n      FlagOnSwitchActiveSlide = true;\n      startTranslateForActiveSwitch -= swiperSlideWidth;\n    }\n\n    if (FlagOnSwitchActiveSlide) {\n      let ariaLabelNumberOLD = (activeIndex % swiperAmount) + 1;\n\n      activeIndex += 1;\n\n      let ariaLabelNumber = (activeIndex % swiperAmount) + 1;\n\n      swiper.slides.forEach((elem) => {\n        let ariaLabelFormat = Number(\n          elem.getAttribute(\"aria-label\").replace(` / ${swiperAmount}`, \"\")\n        );\n\n        if (ariaLabelNumber === ariaLabelFormat) {\n          if (elem.classList.contains(\"swiper-slide-duplicate\")) {\n            elem.classList.add(\"swiper-slide-duplicate-active\");\n          } else {\n            elem.classList.add(\"swiper-slide-active\");\n          }\n        }\n\n        if (ariaLabelNumberOLD === ariaLabelFormat) {\n          if (elem.classList.contains(\"swiper-slide-duplicate\")) {\n            elem.classList.remove(\"swiper-slide-duplicate-active\");\n          } else {\n            elem.classList.remove(\"swiper-slide-active\");\n          }\n        }\n      });\n\n      FlagOnSwitchActiveSlide = false;\n    }\n  }\n\n  let startTranslateForActiveSwitch = startTranslate;\n\n  function SwiperAutoplaySmooth(timeStamp) {\n    let timeInSecond = timeStamp / 1000;\n\n    if (timeInSecond - lastTime >= 0.001) {\n      lastTime = timeInSecond;\n\n      if (!FLAG_FOR_ENTER) {\n        swiper.translateTo(swiper.translate - mergeOptions.speed, 0.01);\n        swiper.updateProgress();\n\n        if (mergeOptions.changeActiveClass) {\n          changeActiveSlide(\n            startTranslateForActiveSwitch,\n            swiper.translate,\n            swiper.activeIndex\n          );\n        }\n\n        if (swiper.progress - startProgress >= startProgress) {\n          swiper.translateTo(startTranslate, 1);\n          swiper.updateProgress();\n\n          startTranslateForActiveSwitch = startTranslate;\n        }\n      }\n    }\n\n    requestAnimationFrame(SwiperAutoplaySmooth);\n  }\n\n  SwiperAutoplaySmooth();\n}\n\n/**\n * Function to getPosition of element in DOM\n * **/\nexport function getPosition(element) {\n  var xPosition = 0;\n  var yPosition = 0;\n\n  while (element) {\n    xPosition += element.offsetLeft - element.scrollLeft + element.clientLeft;\n    yPosition += element.offsetTop - element.scrollTop + element.clientTop;\n    element = element.offsetParent;\n  }\n\n  return { x: xPosition, y: yPosition };\n}\n\n/** returns true if the element or one of its parents has the class classname **/\nexport function hasSomeParentTheClass(element, classname) {\n  if (element.className.split(\" \").indexOf(classname) >= 0) return true;\n  return (\n    element.parentNode && hasSomeParentTheClass(element.parentNode, classname)\n  );\n}\n\n/** find the closest number in array [first is arr, second is needed number] **/\nexport function closest(arr, needle) {\n  return arr.reduce((a, b) => {\n    return Math.abs(b - needle) < Math.abs(a - needle) ? b : a;\n  });\n}\n\n/** Стара функція для перевірки чи елемент знаходиться в Viewport\n * (потрібно юзати з window.addEventListener('scroll'))\n *\n * Проте краще використовувати Intersection Observer API для меншої\n * нагрузки сайту https://developer.mozilla.org/ru/docs/Web/API/Intersection_Observer_API **/\nexport function isInViewport(el) {\n  const rect = el.getBoundingClientRect();\n  return (\n    rect.top >= 0 &&\n    rect.left >= 0 &&\n    rect.bottom <=\n      (window.innerHeight || document.documentElement.clientHeight) &&\n    rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n}\n\n/**\n * CountUp Metamorfosi function\n * (just add .count-up class anywhere and setup unique option in data attributes)\n * **/\nconst counts = Array.from(document.getElementsByClassName(\"count-up\"));\nif (counts) {\n  const defaultOptions = {\n    separator: \"\",\n    enableScrollSpy: true,\n    scrollSpyRunOnce: true,\n  };\n\n  let idNumber = 1;\n\n  counts.forEach((count) => {\n    const id = `count-up-${idNumber}`,\n      value = parseInt(count.innerHTML);\n\n    let optionsFromDataAttr = $(count).data();\n\n    for (const key in optionsFromDataAttr) {\n      if (optionsFromDataAttr[key] === \"\") {\n        optionsFromDataAttr[key] = true;\n      }\n    }\n\n    count.id = id;\n    new CountUp(\n      id,\n      value,\n      Object.assign(Object.assign({}, defaultOptions), optionsFromDataAttr)\n    );\n    idNumber++;\n  });\n}\n\n/** Take index of element in HTMLList (Коли потрібно взяти index елемента з унікальним класом в массиві)\nlet index = [].indexOf.call(\n  peopleArr,\n  document.querySelector(`.people.active`)\n); **/\n\n/** AOS init\nAOS.init({\n  startEvent: \"load\",\n  disableMutationObserver: false,\n});\nAOS.refresh(true); **/\n\n/**\n * default window resize Listener\n * */\n// let windowWidth = window.innerWidth;\n// window.addEventListener('resize', function (e) {\n//     if (windowWidth === window.innerWidth) return;\n//\n//     windowWidth = window.innerWidth;\n//\n//     // your code\n// })\n"]}